{"version":3,"sources":["utils/endpoints.js","utils/api.js","features/chatSlice.js","components/sidebar/sidebarchat/sidebarchat.js","features/appSlice.js","features/userSlice.js","components/common/SearchUser.js","components/sidebar/sidebar.js","components/chat/message/message.js","utils/scrollHook.js","components/chat/chat.js","utils/firebase.js","components/common/formtextfield.js","components/group/groupFormModal.js","components/imessage/imessage.js","utils/history.js","components/authorize/login.js","components/authorize/register.js","components/app/App.js","store.js","index.js"],"names":["BASE_URL","LOGIN","CREATE_GROUP","customAxios","instance","axios","create","baseURL","interceptors","response","use","successHandler","error","errorHandler","defaults","headers","common","post","CancelToken","createCustomAxios","data","isSuccess","Promise","reject","message","cancelToken","INITIAL_STATE","chats","selectedChat","searchResult","shortenMessage","length","substr","searchContact","createAsyncThunk","searchTerm","thunkAPI","a","cancel","api","source","get","params","userSearch","token","selectChat","user","getState","chat","id","threadId","messages","loggedUser","JSON","parse","sessionStorage","getItem","stringify","Users","createGroup","group","chatSlice","createSlice","name","initialState","reducers","setChatList","state","action","_","forIn","mapKeys","payload","value","key","lastMessage","setStatus","values","filter","x","email","status","clientId","addMessage","push","messageText","lastMessageTime","sentAt","clearChatSelection","resetChat","extraReducers","fulfilled","actions","selectChatList","selectSearchResult","SidebarChat","contact","dispatch","useDispatch","selected","useSelector","onClick","className","Avatar","src","photo","firstName","lastName","moment","calendar","appSlice","form","loading","setFormError","setLoading","selectFormError","formName","app","selectLoading","loader","login","userCreds","Error","register","userDetails","password","logout","thunkApi","userSlice","setItem","removeItem","selectUser","selectToken","SearchUser","variant","exclude","selectResult","useState","setValue","handleSearch","e","target","useEffect","Autocomplete","inputValue","freeSolo","disableClearable","onChange","event","filterOptions","options","getOptionLabel","option","r","includes","renderInput","TextField","placeholder","margin","fullWidth","InputProps","type","startAdornment","InputAdornment","position","Sidebar","signOut","Object","chatSelected","isMobile","window","innerWidth","hide","setHide","Tooltip","title","arrow","map","IconButton","href","fontSize","Message","forwardRef","ref","sentBy","fromNow","useScrollToBttom","bottomRef","useRef","current","scrollIntoView","behavior","block","Chat","sendMessage","input","setInput","scrollToBottom","orderBy","console","log","renderBack","msg","onSubmit","preventDefault","disabled","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","provider","GoogleAuthProvider","setCustomParameters","prompt","FormTextField","meta","touched","label","charAt","toLocaleUpperCase","slice","helperText","reduxForm","handleSubmit","open","formError","users","setUsers","Dialog","aria-labelledby","onClose","reset","DialogTitle","DialogContent","FormControl","userIds","u","component","FormLabel","filled","Field","Button","Imessage","connection","setConnection","newConnection","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","build","start","then","catch","on","stop","connectionStarted","invoke","alert","createBrowserHistory","fields","validate","errors","forEach","field","props","signIn","userCred","alt","signInWithPopup","uid","to","asyncValidate","res","asyncBlurFields","signUp","displayName","indexOf","fromGoogle","App","history","path","reducer","combineReducers","store","configureStore","middleware","next","getDefaultMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57f0b3c3.chunk.js","sourcesContent":["export const BASE_URL = \"https://imessage-clone-signalr.herokuapp.com/\";\n//export const BASE_URL = \"https://localhost:44387/\";\nexport const LOGIN = \"/api/Auth/login\";\nexport const SIGNUP = \"/api/Auth/register\";\nexport const EMAIL_CHECK = \"/api/Auth/check-email\";\nexport const SEARCH = \"/api/auth/search-user\";\nexport const MESSAGES = \"/api/chat/messages\";\nexport const SIGNALR = \"chat\";\nexport const CREATE_GROUP = \"/api/chat/create-group\";\n","import axios from \"axios\";\nimport { BASE_URL } from \"./endpoints\";\n\nconst createCustomAxios = () => {\n  let instance = axios.create({\n    baseURL: BASE_URL,\n  });\n  instance.interceptors.response.use(\n    (response) => successHandler(response),\n    (error) => errorHandler(error)\n  );\n\n  instance.defaults.headers.common[\"Content-Type\"] = \"application/json\";\n  instance.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n\n  instance.CancelToken = axios.CancelToken;\n  return instance;\n};\n\nconst customAxios = createCustomAxios();\n\nconst successHandler = (response) => {\n  if (!response.data.isSuccess) {\n    return Promise.reject({\n      response: response,\n      message: response.data.message,\n    });\n  }\n  return response;\n};\n\nconst errorHandler = (error) => {\n  if (error.response?.headers[\"application-error\"]) {\n    error.message = error.response.headers[\"application-error\"];\n  } else if (error.response?.data.message) {\n    error.message = error.response.data.message;\n  }\n  return Promise.reject(error);\n};\n\n// API middleware to add Bearer token after a successful login\nexport const saveAuthToken = (store) => (next) => (action) => {\n  if (action.type === \"user/login/fulfilled\") {\n    setToken(action.payload.token);\n  }\n  return next(action);\n};\n\nexport function setToken(token) {\n  customAxios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n}\n\nexport default customAxios;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport _ from \"lodash\";\nimport api from \"../utils/api\";\nimport { CREATE_GROUP, MESSAGES, SEARCH } from \"../utils/endpoints\";\n\nlet cancelToken;\nconst INITIAL_STATE = {\n  chats: {},\n  selectedChat: null,\n  searchResult: [],\n};\n\nconst shortenMessage = (message) => {\n  if (message.length > 30) {\n    return message.substr(0, 30) + \"...\";\n  }\n  return message;\n};\n\n// Search users bu Name or email\nexport const searchContact = createAsyncThunk(\n  \"chat/search\",\n  async (searchTerm, thunkAPI) => {\n    if (typeof cancelToken !== typeof undefined) {\n      cancelToken.cancel(\"Operation canceled due to new request.\");\n    }\n    cancelToken = api.CancelToken.source();\n    const response = await api.get(SEARCH, {\n      params: { userSearch: searchTerm },\n      cancelToken: cancelToken.token,\n    });\n\n    return response.data.data;\n  }\n);\n\n// Get last 20 messages for selected chat\nexport const selectChat = createAsyncThunk(\n  \"chat/selectChat\",\n  async (user, thunkAPI) => {\n    if (thunkAPI.getState().chat.chats[user.id]) {\n      const response = await api.get(MESSAGES, {\n        params: {\n          threadId: user.id,\n        },\n      });\n      return { ...user, messages: response.data.data };\n    } else {\n      const loggedUser = JSON.parse(sessionStorage.getItem(\"user\"));\n      const response = await api.post(\n        CREATE_GROUP,\n        JSON.stringify({ Users: [user.id, loggedUser.user.id] })\n      );\n      return { ...user, id: response.data.data.id, messages: [] };\n    }\n  }\n);\n\nexport const createGroup = createAsyncThunk(\n  \"chat/createGroup\",\n  async (group, thunkAPI) => {\n    const response = await api.post(CREATE_GROUP, JSON.stringify(group));\n  }\n);\n\nexport const chatSlice = createSlice({\n  name: \"chat\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    setChatList: (state, action) => {\n      _.forIn(_.mapKeys(action.payload, \"id\"), (value, key) => {\n        value.lastMessage = shortenMessage(value.lastMessage);\n        state.chats[key] = value;\n      });\n    },\n    setStatus: (state, action) => {\n      let chat = _.values(state.chats).filter(\n        (x) => x.email === action.payload.email\n      )[0];\n      chat.status = action.payload.status;\n      chat.clientId = action.payload.clientId;\n      state.chats[chat.id] = chat;\n    },\n    addMessage: (state, action) => {\n      if (!state.chats[action.payload.threadId].messages) {\n        state.chats[action.payload.threadId].messages = [];\n      }\n      state.chats[action.payload.threadId].messages.push(action.payload);\n      state.chats[action.payload.threadId].lastMessage = shortenMessage(\n        action.payload.messageText\n      );\n      state.chats[action.payload.threadId].lastMessageTime =\n        action.payload.sentAt;\n      if (state.selectedChat?.id === action.payload.threadId) {\n        state.selectedChat.messages.push(action.payload);\n      }\n    },\n    clearChatSelection: (state) => {\n      state.selectedChat = INITIAL_STATE.selectedChat;\n    },\n    resetChat: (state, action) => {\n      return INITIAL_STATE;\n    },\n  },\n  extraReducers: {\n    [searchContact.fulfilled]: (state, action) => {\n      state.searchResult = action.payload;\n    },\n    [selectChat.fulfilled]: (state, action) => {\n      state.selectedChat = action.payload;\n      state.chats[action.payload.id] = action.payload;\n      state.searchResult = INITIAL_STATE.searchResult;\n    },\n  },\n});\nexport const {\n  setChatList,\n  addMessage,\n  setStatus,\n  resetChat,\n  clearChatSelection,\n} = chatSlice.actions;\nexport const selectedChat = (state) => state.chat.selectedChat;\nexport const selectChatList = (state) => state.chat.chats;\nexport const selectSearchResult = (state) => state.chat.searchResult;\nexport default chatSlice.reducer;\n","import React from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport \"./sidebarchat.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectChat, selectedChat } from \"../../../features/chatSlice\";\nimport moment from \"moment\";\n\nconst SidebarChat = ({ contact }) => {\n  //#region Variable setup\n  const dispatch = useDispatch();\n  const selected = useSelector(selectedChat);\n  //#endregion\n\n  return (\n    <div\n      onClick={() => {\n        dispatch(selectChat(contact));\n      }}\n      className={`sidebarChat ${\n        selected?.id === contact.id ? \"sidebarChat__selected\" : null\n      }`}\n    >\n      <Avatar\n        src={\n          contact.photo ??\n          `https://ui-avatars.com/api/?name=${contact.firstName}+${contact.lastName}&background=random`\n        }\n      />\n      <div className=\"sidebarChat__info\">\n        <h3>{`${contact.firstName} ${contact.lastName}`}</h3>\n        <p>\n          {contact.lastMessage}\n          {/*<small>{moment(contact.lastMessageTime).calendar()}</small>*/}\n        </p>\n        <small>\n          {contact.status\n            ? contact.status === \"Online\"\n              ? \"Online\"\n              : moment(contact.status).calendar()\n            : null}\n        </small>\n      </div>\n    </div>\n  );\n};\n\nexport default SidebarChat;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const appSlice = createSlice({\n  name: \"app\",\n  initialState: {\n    form: {},\n    loading: { group: false },\n  },\n  reducers: {\n    setFormError: (state, action) => {\n      state.form[action.payload.name] = action.payload.error;\n    },\n    setLoading: (state, action) => {\n      state.loading[action.payload.name] = action.payload.loading;\n    },\n  },\n});\nexport const { setFormError, setLoading } = appSlice.actions;\nexport const selectFormError = (state, formName) => state.app.form[formName];\nexport const selectLoading = (state, loader) => state.app.loading[loader];\nexport default appSlice.reducer;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport api from \"../utils/api\";\nimport { LOGIN, SIGNUP } from \"../utils/endpoints\";\nimport { setFormError, setLoading } from \"./appSlice\";\nimport { resetChat } from \"./chatSlice\";\n\nconst initialUser = { user: null, token: null };\n\nexport const login = createAsyncThunk(\n  \"user/login\",\n  async (userCreds = null, thunkAPI) => {\n    if (sessionStorage.getItem(\"user\")) {\n      return JSON.parse(sessionStorage.getItem(\"user\"));\n    } else if (userCreds) {\n      try {\n        thunkAPI.dispatch(setLoading({ name: \"login\", loading: true }));\n        const response = await api.get(LOGIN, {\n          params: userCreds,\n        });\n        thunkAPI.dispatch(setLoading({ name: \"login\", loading: false }));\n\n        return response.data.data;\n      } catch (err) {\n        thunkAPI.dispatch(setFormError({ name: \"login\", error: err.message }));\n        thunkAPI.dispatch(setLoading({ name: \"login\", loading: false }));\n        throw new Error(err);\n      }\n    } else {\n      throw new Error();\n    }\n  }\n);\n\nexport const register = createAsyncThunk(\n  \"user/register\",\n  async (userDetails, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setLoading({ name: \"register\", loading: true }));\n      const response = await api.post(SIGNUP, JSON.stringify(userDetails));\n      thunkAPI.dispatch(\n        login({ email: userDetails.email, password: userDetails.password })\n      );\n      thunkAPI.dispatch(setLoading({ name: \"register\", loading: false }));\n      return response.data.data;\n    } catch (e) {\n      thunkAPI.dispatch(setFormError({ name: \"register\", error: e.message }));\n      thunkAPI.dispatch(setLoading({ name: \"register\", loading: false }));\n      throw new Error(e);\n    }\n  }\n);\n\nexport const logout = createAsyncThunk(\"user/logout\", async (_, thunkApi) => {\n  thunkApi.dispatch(resetChat());\n});\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: initialUser,\n  },\n  extraReducers: {\n    [login.fulfilled]: (state, action) => {\n      state.user = action.payload;\n      sessionStorage.setItem(\"user\", JSON.stringify(action.payload));\n    },\n    [logout.fulfilled]: (state) => {\n      state.user = null;\n      sessionStorage.removeItem(\"user\");\n    },\n  },\n});\n\nexport const selectUser = (state) => state.user.user?.user;\nexport const selectToken = (state) => state.user.user?.token;\nexport default userSlice.reducer;\n","import React, { useEffect, useState } from \"react\";\nimport { searchContact, selectSearchResult } from \"../../features/chatSlice\";\nimport { InputAdornment, TextField } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectLoading } from \"../../features/appSlice\";\n\nconst SearchUser = ({ variant = \"standard\", exclude = [], selectResult }) => {\n  //#region Variable setup\n  const dispatch = useDispatch();\n  const loading = useSelector((state) => selectLoading(state, \"search\"));\n  const searchResult = useSelector(selectSearchResult);\n  const [value, setValue] = useState(\"\");\n  //#endregion\n\n  const handleSearch = (e) => {\n    setValue(e.target.value);\n  };\n\n  // Call Search API to get results\n  useEffect(() => {\n    if (value !== \"\") {\n      dispatch(searchContact(value));\n    }\n  }, [value]);\n\n  return (\n    <Autocomplete\n      inputValue={value}\n      freeSolo\n      disableClearable\n      onChange={(event, value) => {\n        selectResult(value);\n        setValue(\"\");\n      }}\n      loading={loading}\n      filterOptions={(options, state) => options}\n      getOptionLabel={(option) => `${option.firstName} ${option.lastName}`}\n      options={searchResult.filter((r) => !exclude.includes(r.id))}\n      renderInput={(params) => (\n        <TextField\n          onChange={handleSearch}\n          {...params}\n          placeholder=\"Search user\"\n          margin=\"dense\"\n          fullWidth\n          variant={variant}\n          InputProps={{\n            ...params.InputProps,\n            type: \"search\",\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n};\n\nexport default SearchUser;\n","import React, { useEffect, useState } from \"react\";\nimport { Avatar, IconButton, Tooltip } from \"@material-ui/core\";\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\nimport \"./sidebar.css\";\nimport SidebarChat from \"./sidebarchat/sidebarchat\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../../features/userSlice\";\nimport {\n  selectChat,\n  selectChatList,\n  selectedChat,\n} from \"../../features/chatSlice\";\nimport { setLoading } from \"../../features/appSlice\";\nimport SearchUser from \"../common/SearchUser\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\nimport LanguageIcon from \"@material-ui/icons/Language\";\n\nconst Sidebar = ({ signOut }) => {\n  //#region Variable setup\n  const user = useSelector(selectUser);\n  const chats = Object.values(useSelector(selectChatList));\n  const chatSelected = useSelector(selectedChat);\n  const dispatch = useDispatch();\n  const isMobile = window.innerWidth <= 768;\n  const [hide, setHide] = useState(false);\n  //#endregion\n\n  useEffect(() => {\n    if (isMobile && chatSelected) {\n      setHide(true);\n    } else {\n      setHide(false);\n    }\n  }, [chatSelected]);\n  const selectResult = (value) => {\n    dispatch(selectChat(value));\n  };\n\n  return (\n    <div className={hide ? \"sidebar hide\" : \"sidebar\"}>\n      <div className=\"sidebar__header\">\n        <Tooltip title=\"Sign Out\" arrow>\n          <Avatar\n            onClick={signOut}\n            src={\n              user.photo ??\n              `https://ui-avatars.com/api/?name=${user.firstName}+${user.lastName}&background=random`\n            }\n            className=\"sidebar__avatar\"\n          />\n        </Tooltip>\n        <div className=\"sidebar__input\">\n          <SearchUser\n            exclude={[user.id, ...chats?.map((x) => x.id)]}\n            variant=\"outlined\"\n            selectResult={selectResult}\n          />\n        </div>\n        <Tooltip title=\"Create Group\" arrow>\n          <IconButton\n            onClick={() =>\n              dispatch(setLoading({ name: \"group\", loading: true }))\n            }\n          >\n            <RateReviewOutlinedIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n      <div className=\"sidebar__chat\">\n        {chats.map((chat) => (\n          <SidebarChat key={chat.id} contact={chat} />\n        ))}\n      </div>\n      <div className=\"sidebar__footer\">\n        <a\n          href=\"https://www.linkedin.com/in/arghya-ghosh-dotnetbuilders\"\n          target=\"_blank\"\n        >\n          <LinkedInIcon fontSize=\"large\" />\n        </a>\n        <a href=\"https://www.dotnetbuilder.com\" target=\"_blank\">\n          <LanguageIcon fontSize=\"large\" />\n        </a>\n        <a href=\"https://github.com/AHacker02/imessage-clone\" target=\"_blank\">\n          <GitHubIcon fontSize=\"large\" />\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { forwardRef } from \"react\";\nimport \"./message.css\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../../features/userSlice\";\nimport moment from \"moment\";\n\nconst Message = forwardRef(({ messageText, sentAt, sentBy }, ref) => {\n  const user = useSelector(selectUser);\n  return (\n    <div\n      ref={ref}\n      className={`message ${user.id === sentBy && \"message__sender\"}`}\n    >\n      <p>{messageText}</p>\n      <small>{moment(sentAt).fromNow()}</small>\n    </div>\n  );\n});\n\nexport default Message;\n","import { useRef } from \"react\";\n\nexport const useScrollToBttom = () => {\n  const bottomRef = useRef();\n\n  const scrollToBottom = () => {\n    if (bottomRef.current) {\n      bottomRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n      });\n    }\n  };\n\n  return [bottomRef, scrollToBottom];\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./chat.css\";\nimport FlipMove from \"react-flip-move\";\nimport Message from \"./message/message\";\nimport { clearChatSelection, selectedChat } from \"../../features/chatSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\nimport { useScrollToBttom } from \"../../utils/scrollHook\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\n\nconst Chat = ({ sendMessage }) => {\n  //#region Variable setup\n  const [input, setInput] = useState(\"\");\n  const [bottomRef, scrollToBottom] = useScrollToBttom();\n  const chat = useSelector(selectedChat);\n  const isMobile = window.innerWidth <= 768;\n  const [hide, setHide] = useState(false);\n  const dispatch = useDispatch();\n  let messages;\n  //#endregion\n\n  const renderBack = () => {\n    if (isMobile) {\n      return (\n        <ArrowBackIosIcon onClick={() => dispatch(clearChatSelection())} />\n      );\n    }\n  };\n\n  // Sort messages in descending order by  time\n  if (chat) {\n    try {\n      messages = chat.messages;\n      messages = _.orderBy(messages, [\"sentAt\"], [\"asc\"]);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  useEffect(() => {\n    if (isMobile && !chat) {\n      setHide(true);\n    } else {\n      setHide(false);\n    }\n  }, [chat]);\n\n  //#region Scroll to bottom\n  useEffect(() => {\n    scrollToBottom();\n  }, [chat]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, []);\n  //#endregion\n\n  return (\n    <div className={hide ? \"chat hide\" : \"chat\"}>\n      <div className=\"chat__header\">\n        {renderBack()}\n        <h4>\n          To:{\" \"}\n          <span className=\"chat__name\">\n            {chat ? `${chat?.firstName} ${chat?.lastName}` : null}\n          </span>\n        </h4>\n        {/*<strong>Details</strong>*/}\n      </div>\n      <div className=\"chat__messages\">\n        <FlipMove>\n          {messages?.map((msg) => (\n            <Message key={msg.id} {...msg} />\n          ))}\n        </FlipMove>\n        <div ref={bottomRef} className=\"list-bottom\" />\n      </div>\n      <div className=\"chat__input\">\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            sendMessage(input);\n            setInput(\"\");\n          }}\n        >\n          <input\n            value={input}\n            disabled={!chat}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type a message\"\n            type=\"text\"\n          />\n          <button type=\"submit\">Send Message</button>\n        </form>\n        {/*<IconButton>\n          <MicNoneIcon className=\"chat__mic\" />\n        </IconButton>*/}\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDd7RkOx-DN8Op7rU2NRpnaR3tghTr1Ec8\",\n  authDomain: \"imessage-clone-54a5a.firebaseapp.com\",\n  projectId: \"imessage-clone-54a5a\",\n  storageBucket: \"imessage-clone-54a5a.appspot.com\",\n  messagingSenderId: \"662929065374\",\n  appId: \"1:662929065374:web:edec7a6203bc96d36c428f\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\n//const db = firebaseApp.firestore();\nexport const auth = firebase.auth();\nexport const provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\n//export default db;\n","import React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\nconst FormTextField = ({ input, meta, type, margin = \"normal\" }) => {\n  const error = meta.touched && meta.error;\n  return (\n    <TextField\n      error={error}\n      label={input.name.charAt(0).toLocaleUpperCase() + input.name.slice(1)}\n      type={type}\n      margin={margin}\n      helperText={error ? meta.error : null}\n      {...input}\n    />\n  );\n};\n\nexport default FormTextField;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport {\n  Avatar,\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormLabel,\n  List,\n} from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectFormError,\n  selectLoading,\n  setFormError,\n  setLoading,\n} from \"../../features/appSlice\";\nimport { selectUser } from \"../../features/userSlice\";\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport FormTextField from \"../common/formtextfield\";\nimport SearchUser from \"../common/SearchUser\";\nimport \"./group.css\";\nimport { createGroup } from \"../../features/chatSlice\";\nimport { useScrollToBttom } from \"../../utils/scrollHook\";\n\nconst formName = \"group\";\n\nconst GroupFormModal = ({ group = null, handleSubmit }) => {\n  //#region Variable setup\n  const open = useSelector((state) => selectLoading(state, formName));\n  const formError = useSelector((state) => selectFormError(state, formName));\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n  const [users, setUsers] = useState([user]);\n  const [bottomRef, scrollToBottom] = useScrollToBttom();\n  //#endregion\n\n  // Add new user to group\n  const addUser = (value) => {\n    setUsers((u) => [...u, value]);\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [users]);\n\n  const close = () => {\n    dispatch(setLoading({ name: \"group\", loading: false }));\n    dispatch(reset(formName));\n    setUsers([user]);\n  };\n\n  const addGroup = (group) => {\n    let userIds = users.map((u) => u.id);\n    if (userIds.length <= 2) {\n      dispatch(\n        setFormError({\n          name: formName,\n          error: \"Group must have minimum 3 members\",\n        })\n      );\n      return;\n    }\n    dispatch(createGroup({ name: group.name, users: userIds }));\n    dispatch(setLoading({ name: \"group\", loading: false }));\n  };\n\n  return (\n    <Dialog\n      aria-labelledby=\"group-form-title\"\n      open={open}\n      onClose={close}\n      className=\"group\"\n    >\n      <DialogTitle id=\"group-form-title\" className=\"group__title\">\n        <strong>{group ? \"Add User to group\" : \"Create new group\"}</strong>\n      </DialogTitle>\n      <DialogContent>\n        <FormControl\n          onSubmit={handleSubmit(addGroup)}\n          component=\"form\"\n          margin=\"standard\"\n          className=\"group__form\"\n        >\n          {formError ? (\n            <FormLabel error filled>\n              {formError}\n            </FormLabel>\n          ) : null}\n          <Field\n            name=\"name\"\n            type=\"text\"\n            margin=\"none\"\n            component={FormTextField}\n          />\n          <SearchUser selectResult={addUser} exclude={users.map((u) => u.id)} />\n          <Button type=\"submit\">Create Group</Button>\n          <ul className=\"group__list\">\n            {users.map((u) => {\n              return (\n                <div key={u.id} className=\"group__user\">\n                  <Avatar\n                    src={\n                      u.photo ??\n                      `https://ui-avatars.com/api/?name=${u.firstName}+${u.lastName}&background=random`\n                    }\n                  />\n                  <h3>{`${u.firstName} ${u.lastName}`}</h3>\n                </div>\n              );\n            })}\n            <div ref={bottomRef} className=\"list-bottom\"></div>\n          </ul>\n        </FormControl>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default reduxForm({ form: \"group\" })(GroupFormModal);\n","import React, { useEffect, useState } from \"react\";\nimport Sidebar from \"../sidebar/sidebar\";\nimport Chat from \"../chat/chat\";\nimport \"./imessage.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logout, selectToken } from \"../../features/userSlice\";\nimport { BASE_URL, SIGNALR } from \"../../utils/endpoints\";\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\nimport {\n  addMessage,\n  selectedChat,\n  setChatList,\n  setStatus,\n} from \"../../features/chatSlice\";\nimport { auth } from \"../../utils/firebase\";\nimport GroupFormModal from \"../group/groupFormModal\";\n\nconst Imessage = () => {\n  //#region Variable setup\n  const token = useSelector(selectToken);\n  const [connection, setConnection] = useState(null);\n  const chat = useSelector(selectedChat);\n  const dispatch = useDispatch();\n  //#endregion\n\n  // Create signalR connection on login\n  useEffect(() => {\n    const newConnection = new HubConnectionBuilder()\n      .withUrl(BASE_URL + SIGNALR, { accessTokenFactory: () => token })\n      .withAutomaticReconnect()\n      .build();\n\n    setConnection(newConnection);\n  }, [token]);\n\n  // Start listening on topics\n  useEffect(() => {\n    if (connection) {\n      connection\n        .start()\n        .then(() => {\n          console.log(\"Connected\");\n        })\n        .catch((e) => {\n          console.log(\"Connection failed:\", e);\n        });\n\n      connection.on(\"Chats\", (chats) => {\n        console.log(\"Chats\", chats);\n        dispatch(setChatList(chats));\n      });\n      connection.on(\"Message\", (message) => {\n        console.log(\"Message\", message);\n        dispatch(addMessage(message));\n      });\n      connection.on(\"UserStatus\", (user) => {\n        console.log(\"UserStatus\", user);\n        dispatch(setStatus(user));\n      });\n    }\n  }, [connection]);\n\n  //Send new message\n  const sendMessage = (message) => {\n    if (connection.connectionStarted) {\n      try {\n        connection.invoke(\"SendMessage\", chat.id, message);\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n      alert(\"No connection to server yet.\");\n    }\n  };\n\n  // Reset all on sign out\n  const signOut = () => {\n    auth.signOut();\n    dispatch(logout());\n    connection.stop();\n  };\n\n  return (\n    <div className=\"imessage\">\n      <Sidebar signOut={signOut} />\n      <Chat sendMessage={sendMessage} />\n      <GroupFormModal />\n    </div>\n  );\n};\n\nexport default Imessage;\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","import \"./authorize.css\";\nimport { Field, reduxForm } from \"redux-form\";\nimport React from \"react\";\nimport { Button, FormControl, FormLabel } from \"@material-ui/core\";\nimport { auth, provider } from \"../../utils/firebase\";\nimport FormTextField from \"../common/formtextfield\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login } from \"../../features/userSlice\";\nimport { Link } from \"react-router-dom\";\nimport {\n  selectFormError,\n  selectLoading,\n  setFormError,\n} from \"../../features/appSlice\";\n\nconst fields = [\n  { name: \"email\", type: \"email\" },\n  { name: \"password\", type: \"password\" },\n];\n\nconst formName = \"login\";\n\nconst Login = (props) => {\n  //#region Variable setup\n  const dispatch = useDispatch();\n  const formError = useSelector((state) => selectFormError(state, formName));\n  const loading = useSelector((state) => selectLoading(state, formName));\n  //#endregion\n\n  //Sign In using google account\n  const googleSignIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((user) => {\n        signIn({ email: user.user.email, password: user.user.uid });\n      })\n      .catch((error) =>\n        dispatch(setFormError({ name: formName, error: error.message }))\n      );\n  };\n\n  const signIn = (userCred) => {\n    dispatch(login(userCred));\n  };\n\n  return (\n    <div className=\"authorize\">\n      <div className=\"authorize__container\">\n        <div className=\"authorize__logo\">\n          <img src=\"https://i.redd.it/jdto14wkj9f51.png\" alt=\"\" />\n          <h1>iMessage</h1>\n        </div>\n        <FormControl\n          component=\"form\"\n          margin=\"normal\"\n          className=\"authorize__form\"\n          onSubmit={props.handleSubmit(signIn)}\n        >\n          {formError ? (\n            <FormLabel error filled>\n              {formError}\n            </FormLabel>\n          ) : null}\n          {fields.map((field) => (\n            <Field\n              key={field.name}\n              name={field.name}\n              type={field.type}\n              component={FormTextField}\n            />\n          ))}\n          <Button disabled={loading} type=\"submit\">\n            Sign In\n          </Button>\n        </FormControl>\n        <div className=\"authorize__social\">\n          <small>Or Sign In Using</small>\n          <img\n            onClick={googleSignIn}\n            src=\"https://img-authors.flaticon.com/google.jpg\"\n            alt=\"\"\n          />\n        </div>\n        <p>\n          Don't have an account?{\" \"}\n          <Link to=\"/register\">\n            <strong>Sign Up</strong>\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst validate = (values) => {\n  const errors = {};\n  fields.forEach((field) => {\n    if (!values[field.name]) {\n      errors[field.name] = `${\n        field.name.charAt(0).toLocaleUpperCase() + field.name.slice(1)\n      } cannot be empty`;\n    }\n  });\n  return errors;\n};\n\nexport default reduxForm({ form: formName, validate })(Login);\n","import React from \"react\";\nimport \"./authorize.css\";\nimport { Button, FormControl, FormLabel } from \"@material-ui/core\";\nimport { Field, reduxForm } from \"redux-form\";\nimport FormTextField from \"../common/formtextfield\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectFormError,\n  selectLoading,\n  setFormError,\n} from \"../../features/appSlice\";\nimport { Link } from \"react-router-dom\";\nimport { register } from \"../../features/userSlice\";\nimport { auth, provider } from \"../../utils/firebase\";\nimport api from \"../../utils/api\";\nimport { EMAIL_CHECK } from \"../../utils/endpoints\";\n\nconst fields = [\n  { name: \"firstname\", type: \"text\" },\n  { name: \"lastname\", type: \"text\" },\n  { name: \"email\", type: \"email\" },\n  { name: \"password\", type: \"password\" },\n];\nconst formName = \"register\";\n\nconst Register = (props) => {\n  //#region Variable setup\n  const formError = useSelector((state) => selectFormError(state, formName));\n  const loading = useSelector((state) => selectLoading(state, formName));\n  const dispatch = useDispatch();\n  //#endregion\n\n  // Register using user details from Google account\n  const googleSignUp = () => {\n    auth\n      .signInWithPopup(provider)\n      .then(({ user }) => {\n        signUp({\n          firstName: user.displayName.substr(0, user.displayName.indexOf(\" \")),\n          lastName: user.displayName.substr(user.displayName.indexOf(\" \") + 1),\n          email: user.email,\n          password: user.uid,\n          fromGoogle: true,\n        });\n      })\n      .catch((error) =>\n        dispatch(setFormError({ name: formName, error: error.message }))\n      );\n  };\n\n  const signUp = (userDetails) => {\n    dispatch(register(userDetails));\n  };\n\n  return (\n    <div className=\"authorize\">\n      <div className=\"authorize__container\">\n        <div className=\"authorize__logo\">\n          <img src=\"https://i.redd.it/jdto14wkj9f51.png\" alt=\"\" />\n          <h1>iMessage</h1>\n        </div>\n        <FormControl\n          component=\"form\"\n          margin=\"normal\"\n          className=\"authorize__form\"\n          onSubmit={props.handleSubmit(signUp)}\n        >\n          {formError ? (\n            <FormLabel error filled>\n              {formError}\n            </FormLabel>\n          ) : null}\n          {fields.map((field) => (\n            <Field\n              name={field.name}\n              type={field.type}\n              component={FormTextField}\n            />\n          ))}\n          <Button disabled={loading} type=\"submit\">\n            Create Account\n          </Button>\n        </FormControl>\n        <div className=\"authorize__social\">\n          <small>Or Sign Up Using</small>\n          <img\n            onClick={googleSignUp}\n            src=\"https://img-authors.flaticon.com/google.jpg\"\n            alt=\"\"\n          />\n        </div>\n        <p>\n          Already have an account?{\" \"}\n          <Link to=\"/login\">\n            <strong>Login</strong>\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst validate = (values) => {\n  const errors = {};\n  fields.forEach((field) => {\n    if (!values[field.name]) {\n      errors[field.name] = `${\n        field.name.charAt(0).toLocaleUpperCase() + field.name.slice(1)\n      } cannot be empty`;\n    }\n    if (\n      field.name === \"password\" &&\n      values[field.name] &&\n      values[field.name].length < 8\n    ) {\n      errors[field.name] = \"Password needs to be minimum 8 characters\";\n    }\n  });\n  return errors;\n};\n\n// Check if email already in use\nconst asyncValidate = (value) => {\n  return api\n    .get(EMAIL_CHECK, { params: { email: value[\"email\"] } })\n    .then((res) => {\n      if (res?.data.message.includes(\"Email already in use\")) {\n        throw { email: res.data.message };\n      }\n    });\n};\n\nexport default reduxForm({\n  form: formName,\n  validate,\n  asyncValidate,\n  asyncBlurFields: [\"email\"],\n})(Register);\n","import \"./App.css\";\nimport Imessage from \"../imessage/imessage\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport history from \"../../utils/history\";\nimport { Route, Router, Switch } from \"react-router-dom\";\nimport { selectUser, login } from \"../../features/userSlice\";\nimport Login from \"../authorize/login\";\nimport { useEffect } from \"react\";\nimport Register from \"../authorize/register\";\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  // Try login from session after refresh\n  useEffect(() => {\n    dispatch(login());\n  }, []);\n\n  // Redirect to login if user not logged in\n  useEffect(() => {\n    if (!user) {\n      history.push(\"/login\");\n    } else {\n      history.push(\"/\");\n    }\n  }, [user]);\n\n  return (\n    <Router history={history}>\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/\">{user && <Imessage />}</Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport user from \"./features/userSlice\";\nimport chat from \"./features/chatSlice\";\nimport app from \"./features/appSlice\";\nimport { reducer as form } from \"redux-form\";\nimport { saveAuthToken } from \"./utils/api\";\nconst reducer = combineReducers({\n  user,\n  chat,\n  form,\n  app,\n});\nconst store = configureStore({\n  reducer,\n  middleware: [saveAuthToken, ...getDefaultMiddleware()],\n});\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}