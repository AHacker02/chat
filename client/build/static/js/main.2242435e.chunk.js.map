{"version":3,"sources":["utils/endpoints.js","utils/api.js","features/chatSlice.js","components/sidebar/sidebarchat/sidebarchat.js","features/appSlice.js","features/userSlice.js","components/common/SearchUser.js","components/sidebar/sidebar.js","components/chat/message/message.js","components/chat/chat.js","utils/firebase.js","components/common/formtextfield.js","components/group/group.js","components/imessage/imessage.js","utils/history.js","components/authorize/login/login.js","components/authorize/register/register.js","components/app/App.js","store.js","index.js"],"names":["BASE_URL","customAxios","instance","axios","create","baseURL","interceptors","response","use","successHandler","error","errorHandler","defaults","headers","common","post","sessionStorage","getItem","JSON","parse","token","CancelToken","createCustomAxios","data","isSuccess","Promise","reject","message","source","cancelToken","searchContact","createAsyncThunk","searchTerm","thunkAPI","a","cancel","api","get","params","userSearch","selectChat","user","userId","id","messages","createGroup","group","stringify","INITIAL_STATE","chats","selectedChat","searchResult","chatSlice","createSlice","name","initialState","reducers","setChatList","state","action","_","forIn","mapKeys","payload","value","key","setStatus","status","clientId","addMessage","fromUserId","toUserId","lastMessage","messageText","lastMessageTime","sentAt","push","resetChat","extraReducers","fulfilled","actions","chat","selectChatList","selectSearchResult","SidebarChat","contact","dispatch","useDispatch","selected","useSelector","onClick","className","Avatar","src","photo","firstName","lastName","moment","calendar","appSlice","form","loading","setFormError","setLoading","selectFormError","formName","app","selectLoading","loader","initialUser","login","userCreds","Error","register","userDetails","email","password","logout","thunkApi","userSlice","setItem","removeItem","selectUser","selectToken","SearchUser","variant","selectResult","useState","setValue","handleSearch","e","target","useEffect","Autocomplete","inputValue","freeSolo","disableClearable","onChange","event","filterOptions","options","getOptionLabel","option","renderInput","TextField","placeholder","margin","fullWidth","InputProps","type","startAdornment","InputAdornment","position","Sidebar","signOut","Object","values","IconButton","map","Message","forwardRef","ref","fromNow","Chat","sendMessage","input","setInput","orderBy","console","log","bottomRef","useRef","scrollToBottom","current","scrollIntoView","behavior","block","msg","onSubmit","preventDefault","disabled","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","provider","GoogleAuthProvider","setCustomParameters","prompt","FormTextField","meta","touched","label","charAt","toLocaleUpperCase","slice","helperText","reduxForm","handleSubmit","open","formError","users","setUsers","Dialog","aria-labelledby","onClose","reset","DialogTitle","DialogContent","FormControl","userIds","u","component","FormLabel","filled","Field","multiple","Button","Imessage","connection","setConnection","newConnection","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","build","start","then","catch","on","stop","connectionStarted","invoke","alert","createBrowserHistory","fields","validate","errors","forEach","field","props","signIn","alt","signInWithPopup","to","signUp","displayName","substr","indexOf","uid","App","history","path","reducer","combineReducers","store","configureStore","middleware","next","getDefaultMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2242435e.chunk.js","sourcesContent":["export const BASE_URL = \"https://imessage-clone-signalr.herokuapp.com/\";\nexport const LOGIN = \"/api/Auth/login\";\nexport const SIGNUP = \"/api/Auth/register\";\nexport const EMAIL_CHECK = \"/api/Auth/check-email\";\nexport const SEARCH = \"/api/user/search\";\nexport const MESSAGES = \"/api/chat/messages\";\nexport const SIGNALR = \"chat\";\nexport const CREATE_GROUP = \"/api/chat/create-group\";\n","import axios from \"axios\";\nimport { BASE_URL } from \"./endpoints\";\n\nconst createCustomAxios = () => {\n  let instance = axios.create({\n    baseURL: BASE_URL,\n  });\n  instance.interceptors.response.use(\n    (response) => successHandler(response),\n    (error) => errorHandler(error)\n  );\n\n  instance.defaults.headers.common[\"Content-Type\"] = \"application/json\";\n  instance.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n  //To add header again after refresh\n  if (\n    !instance.defaults.headers.common[\"Authorization\"] &&\n    sessionStorage.getItem(\"user\")\n  ) {\n    instance.defaults.headers.common[\"Authorization\"] = `Bearer ${\n      JSON.parse(sessionStorage.getItem(\"user\"))?.token\n    }`;\n  }\n  instance.CancelToken = axios.CancelToken;\n  return instance;\n};\nconst customAxios = createCustomAxios();\n\nconst successHandler = (response) => {\n  if (!response.data.isSuccess) {\n    return Promise.reject({\n      response: response,\n      message: response.data.message,\n    });\n  }\n  return response;\n};\n\nconst errorHandler = (error) => {\n  if (error.response.headers[\"application-error\"]) {\n    error.message = error.response.headers[\"application-error\"];\n  } else if (error.response.data.message) {\n    error.message = error.response.data.message;\n  }\n  return Promise.reject(error);\n};\nexport const saveAuthToken = (store) => (next) => (action) => {\n  if (action.type === \"user/login/fulfilled\") {\n    // after a successful login, update the token in the API\n    setToken(action.payload.token);\n  }\n\n  // continue processing this action\n  return next(action);\n};\n\nexport const cancelTokenSource = axios.CancelToken.source();\n\nexport function setToken(token) {\n  customAxios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n}\n\nexport default customAxios;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport _ from \"lodash\";\nimport api from \"../utils/api\";\nimport { CREATE_GROUP, MESSAGES, SEARCH } from \"../utils/endpoints\";\n\nlet cancelToken;\n\nexport const searchContact = createAsyncThunk(\n  \"chat/search\",\n  async (searchTerm, thunkAPI) => {\n    if (typeof cancelToken !== typeof undefined) {\n      cancelToken.cancel(\"Operation canceled due to new request.\");\n    }\n    cancelToken = api.CancelToken.source();\n    const response = await api.get(SEARCH, {\n      params: { userSearch: searchTerm },\n      cancelToken: cancelToken.token,\n    });\n\n    return response.data.data;\n  }\n);\n\nexport const selectChat = createAsyncThunk(\n  \"chat/selectChat\",\n  async (user, thunkAPI) => {\n    const response = await api.get(MESSAGES, {\n      params: {\n        userId: user.id,\n      },\n    });\n    return { ...user, messages: response.data.data };\n  }\n);\n\nexport const createGroup = createAsyncThunk(\n  \"chat/createGroup\",\n  async (group, thunkAPI) => {\n    const response = await api.post(CREATE_GROUP, JSON.stringify(group));\n  }\n);\n\nconst INITIAL_STATE = {\n  chats: {},\n  selectedChat: null,\n  searchResult: [],\n};\n\nexport const chatSlice = createSlice({\n  name: \"chat\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    setChatList: (state, action) => {\n      _.forIn(_.mapKeys(action.payload, \"id\"), (value, key) => {\n        state.chats[key] = value;\n      });\n    },\n    setStatus: (state, action) => {\n      state.chats[action.payload.id].status = action.payload.status;\n      state.chats[action.payload.id].clientId = action.payload.clientId;\n    },\n    addMessage: (state, action) => {\n      let userId;\n      if (state.chats[action.payload.fromUserId]) {\n        userId = action.payload.fromUserId;\n      } else if (state.chats[action.payload.toUserId]) {\n        userId = action.payload.toUserId;\n      }\n      //state.chats[userId].messages.push(action.payload);\n      state.chats[userId].lastMessage = action.payload.messageText;\n      state.chats[userId].lastMessageTime = action.payload.sentAt;\n      if (state.selectedChat?.id === userId) {\n        state.selectedChat.messages.push(action.payload);\n      }\n    },\n    resetChat: (state, action) => {\n      return INITIAL_STATE;\n    },\n  },\n  extraReducers: {\n    [searchContact.fulfilled]: (state, action) => {\n      state.searchResult = action.payload;\n    },\n    [selectChat.fulfilled]: (state, action) => {\n      state.selectedChat = action.payload;\n      state.chats[action.payload.id] = action.payload;\n      state.searchResult = null;\n    },\n  },\n});\nexport const {\n  setChatList,\n  addMessage,\n  setStatus,\n  resetChat,\n} = chatSlice.actions;\nexport const selectedChat = (state) => state.chat.selectedChat;\nexport const selectChatList = (state) => state.chat.chats;\nexport const selectSearchResult = (state) => state.chat.searchResult;\nexport default chatSlice.reducer;\n","import React from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport \"./sidebarchat.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectChat, selectedChat } from \"../../../features/chatSlice\";\nimport moment from \"moment\";\n\nconst SidebarChat = ({ contact }) => {\n  const dispatch = useDispatch();\n  const selected = useSelector(selectedChat);\n  return (\n    <div\n      onClick={() => {\n        dispatch(selectChat(contact));\n      }}\n      className={`sidebarChat ${\n        selected?.id === contact.id ? \"sidebarChat__selected\" : null\n      }`}\n    >\n      <Avatar\n        src={\n          contact.photo ??\n          `https://ui-avatars.com/api/?name=${contact.firstName}+${contact.lastName}&background=random`\n        }\n      />\n      <div className=\"sidebarChat__info\">\n        <h3>{`${contact.firstName} ${contact.lastName}`}</h3>\n        <p>\n          {contact.lastMessage}\n          {/*<small>{moment(contact.lastMessageTime).calendar()}</small>*/}\n        </p>\n        <small>\n          {contact.status\n            ? contact.status === \"Online\"\n              ? \"Online\"\n              : moment(contact.status).calendar()\n            : null}\n        </small>\n      </div>\n    </div>\n  );\n};\n\nexport default SidebarChat;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const appSlice = createSlice({\n  name: \"app\",\n  initialState: {\n    form: {},\n    loading: { group: false },\n  },\n  reducers: {\n    setFormError: (state, action) => {\n      state.form[action.payload.name] = action.payload.error;\n    },\n    setLoading: (state, action) => {\n      state.loading[action.payload.name] = action.payload.loading;\n    },\n  },\n});\nexport const { setFormError, setLoading } = appSlice.actions;\nexport const selectFormError = (state, formName) => state.app.form[formName];\nexport const selectLoading = (state, loader) => state.app.loading[loader];\nexport default appSlice.reducer;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport api from \"../utils/api\";\nimport { LOGIN, SIGNUP } from \"../utils/endpoints\";\nimport { setFormError, setLoading } from \"./appSlice\";\nimport { resetChat } from \"./chatSlice\";\n\nconst initialUser = sessionStorage.getItem(\"user\")\n  ? JSON.parse(sessionStorage.getItem(\"user\"))\n  : null;\n\nexport const login = createAsyncThunk(\n  \"user/login\",\n  async (userCreds, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setLoading({ name: \"login\", loading: true }));\n      const response = await api.get(LOGIN, {\n        params: userCreds,\n      });\n      thunkAPI.dispatch(setLoading({ name: \"login\", loading: false }));\n\n      return response.data.data;\n    } catch (err) {\n      thunkAPI.dispatch(setFormError({ name: \"login\", error: err.message }));\n      thunkAPI.dispatch(setLoading({ name: \"login\", loading: false }));\n      throw new Error(err);\n    }\n  }\n);\n\nexport const register = createAsyncThunk(\n  \"user/register\",\n  async (userDetails, thunkAPI) => {\n    try {\n      thunkAPI.dispatch(setLoading({ name: \"register\", loading: true }));\n      const response = await api.post(SIGNUP, JSON.stringify(userDetails));\n      thunkAPI.dispatch(\n        login({ email: userDetails.email, password: userDetails.password })\n      );\n      thunkAPI.dispatch(setLoading({ name: \"register\", loading: false }));\n      return response.data.data;\n    } catch (e) {\n      thunkAPI.dispatch(setFormError({ name: \"register\", error: e.message }));\n      thunkAPI.dispatch(setLoading({ name: \"register\", loading: false }));\n      throw new Error(e);\n    }\n  }\n);\n\nexport const logout = createAsyncThunk(\"user/logout\", async (_, thunkApi) => {\n  thunkApi.dispatch(resetChat());\n});\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: initialUser,\n  },\n  extraReducers: {\n    [login.fulfilled]: (state, action) => {\n      state.user = action.payload;\n      sessionStorage.setItem(\"user\", JSON.stringify(action.payload));\n    },\n    [logout.fulfilled]: (state) => {\n      state.user = null;\n      sessionStorage.removeItem(\"user\");\n    },\n  },\n});\n\nexport const selectUser = (state) => state.user.user?.user;\nexport const selectToken = (state) => state.user.user?.token;\nexport default userSlice.reducer;\n","import React, { useEffect, useState } from \"react\";\nimport { searchContact, selectSearchResult } from \"../../features/chatSlice\";\nimport { InputAdornment, TextField } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectLoading } from \"../../features/appSlice\";\n\nconst SearchUser = ({ variant = \"standard\", selectResult }) => {\n  const dispatch = useDispatch();\n  const loading = useSelector((state) => selectLoading(state, \"search\"));\n  const searchResult = useSelector(selectSearchResult);\n  const [value, setValue] = useState(\"\");\n\n  const handleSearch = (e) => {\n    if (e.target.value) {\n      setValue(e.target.value);\n    }\n  };\n\n  useEffect(() => {\n    if (value !== \"\") {\n      dispatch(searchContact(value));\n    }\n  }, [value]);\n\n  return (\n    <Autocomplete\n      inputValue={value}\n      freeSolo\n      disableClearable\n      onChange={(event, value) => {\n        selectResult(value);\n        setValue(\"\");\n      }}\n      loading={loading}\n      filterOptions={(options, state) => options}\n      getOptionLabel={(option) => `${option.firstName} ${option.lastName}`}\n      options={searchResult}\n      renderInput={(params) => (\n        <TextField\n          onChange={handleSearch}\n          {...params}\n          placeholder=\"Search user\"\n          margin=\"dense\"\n          fullWidth\n          variant={variant}\n          InputProps={{\n            ...params.InputProps,\n            type: \"search\",\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n};\n\nexport default SearchUser;\n","import React from \"react\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\nimport \"./sidebar.css\";\nimport SidebarChat from \"./sidebarchat/sidebarchat\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../../features/userSlice\";\nimport {\n  searchContact,\n  selectChat,\n  selectChatList,\n  selectSearchResult,\n} from \"../../features/chatSlice\";\nimport { selectLoading, setLoading } from \"../../features/appSlice\";\nimport SearchUser from \"../common/SearchUser\";\n\nconst Sidebar = ({ signOut }) => {\n  const user = useSelector(selectUser);\n  const chats = Object.values(useSelector(selectChatList));\n  const dispatch = useDispatch();\n\n  const selectResult = (value) => {\n    dispatch(selectChat(value));\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar\n          onClick={signOut}\n          src={\n            user.photo ??\n            `https://ui-avatars.com/api/?name=${user.firstName}+${user.lastName}&background=random`\n          }\n          className=\"sidebar__avatar\"\n        />\n        <div className=\"sidebar__input\">\n          {/* <SearchIcon />*/}\n          {/*<input placeholder=\"Search\" />*/}\n          <SearchUser variant=\"outlined\" selectResult={selectResult} />\n        </div>\n\n        <IconButton\n          onClick={() => dispatch(setLoading({ name: \"group\", loading: true }))}\n        >\n          <RateReviewOutlinedIcon />\n        </IconButton>\n      </div>\n      <div className=\"sidebar__chat\">\n        {chats.map((chat) => (\n          <SidebarChat key={chat.id} contact={chat} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { forwardRef } from \"react\";\nimport \"./message.css\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../../features/userSlice\";\nimport moment from \"moment\";\n\nconst Message = forwardRef(({ messageText, sentAt, fromUserId }, ref) => {\n  const user = useSelector(selectUser);\n  return (\n    <div\n      ref={ref}\n      className={`message ${user.id === fromUserId && \"message__sender\"}`}\n    >\n      <p>{messageText}</p>\n      <small>{moment(sentAt).fromNow()}</small>\n    </div>\n  );\n});\n\nexport default Message;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./chat.css\";\nimport { IconButton } from \"@material-ui/core\";\nimport MicNoneIcon from \"@material-ui/icons/MicNone\";\nimport FlipMove from \"react-flip-move\";\nimport Message from \"./message/message\";\nimport { selectedChat } from \"../../features/chatSlice\";\nimport { useSelector } from \"react-redux\";\nimport _ from \"lodash\";\n\nconst Chat = ({ sendMessage }) => {\n  const [input, setInput] = useState(\"\");\n  const chat = useSelector(selectedChat);\n  let messages;\n  if (chat) {\n    try {\n      messages = chat.messages;\n      messages = _.orderBy(messages, [\"sentAt\"], [\"asc\"]);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  const bottomRef = useRef();\n\n  const scrollToBottom = () => {\n    bottomRef.current.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"start\",\n    });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [chat]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, []);\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <h4>\n          To:{\" \"}\n          <span className=\"chat__name\">\n            {chat ? `${chat?.firstName} ${chat?.lastName}` : null}\n          </span>\n        </h4>\n        {/*<strong>Details</strong>*/}\n      </div>\n      <div className=\"chat__messages\">\n        <FlipMove>\n          {messages?.map((msg) => (\n            <Message key={msg.id} {...msg} />\n          ))}\n        </FlipMove>\n        <div ref={bottomRef} className=\"list-bottom\" />\n      </div>\n      <div className=\"chat__input\">\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            sendMessage(input);\n            setInput(\"\");\n          }}\n        >\n          <input\n            value={input}\n            disabled={!chat}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type a message\"\n            type=\"text\"\n          />\n          <button type=\"submit\">Send Message</button>\n        </form>\n        {/*<IconButton>\n          <MicNoneIcon className=\"chat__mic\" />\n        </IconButton>*/}\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDd7RkOx-DN8Op7rU2NRpnaR3tghTr1Ec8\",\n  authDomain: \"imessage-clone-54a5a.firebaseapp.com\",\n  projectId: \"imessage-clone-54a5a\",\n  storageBucket: \"imessage-clone-54a5a.appspot.com\",\n  messagingSenderId: \"662929065374\",\n  appId: \"1:662929065374:web:edec7a6203bc96d36c428f\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\n//const db = firebaseApp.firestore();\nexport const auth = firebase.auth();\nexport const provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\n//export default db;\n","import React from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nconst FormTextField = ({ input, meta, type }) => {\r\n  const error = meta.touched && meta.error;\r\n  return (\r\n    <TextField\r\n      error={error}\r\n      label={input.name.charAt(0).toLocaleUpperCase() + input.name.slice(1)}\r\n      type={type}\r\n      margin=\"normal\"\r\n      helperText={error ? meta.error : null}\r\n      {...input}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FormTextField;\r\n","import React, { useEffect, useRef, useState } from \"react\";\nimport {\n  Avatar,\n  Button,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormLabel,\n  List,\n} from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectFormError,\n  selectLoading,\n  setLoading,\n} from \"../../features/appSlice\";\nimport { selectUser } from \"../../features/userSlice\";\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport FormTextField from \"../common/formtextfield\";\nimport SearchUser from \"../common/SearchUser\";\nimport \"./group.css\";\nimport { createGroup } from \"../../features/chatSlice\";\n\nconst formName = \"group\";\n\nconst Group = ({ group = null, handleSubmit }) => {\n  const open = useSelector((state) => selectLoading(state, formName));\n  const formError = useSelector((state) => selectFormError(state, formName));\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n  const [users, setUsers] = useState([user]);\n  const addUser = (value) => {\n    setUsers((u) => [...u, value]);\n  };\n\n  const bottomRef = useRef();\n  const scrollToBottom = () => {\n    if (bottomRef.current) {\n      bottomRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [users]);\n\n  const close = () => {\n    dispatch(setLoading({ name: \"group\", loading: false }));\n    dispatch(reset(formName));\n    setUsers([user]);\n  };\n\n  const addGroup = (group) => {\n    let userIds = users.map((u) => u.id);\n    dispatch(createGroup({ name: group.name, users: userIds }));\n    dispatch(setLoading({ name: \"group\", loading: false }));\n  };\n\n  return (\n    <Dialog\n      aria-labelledby=\"group-form-title\"\n      open={open}\n      onClose={close}\n      className=\"group\"\n    >\n      <DialogTitle id=\"group-form-title\" className=\"group__title\">\n        <h3>{group ? \"Add User to group\" : \"Create new group\"}</h3>\n      </DialogTitle>\n      <DialogContent>\n        <FormControl\n          onSubmit={handleSubmit(addGroup)}\n          component=\"form\"\n          margin=\"none\"\n          className=\"login__form\"\n        >\n          {formError ? (\n            <FormLabel error filled>\n              {formError}\n            </FormLabel>\n          ) : null}\n          <Field name=\"name\" type=\"text\" component={FormTextField} />\n          <SearchUser selectResult={addUser} multiple />\n          <Button type=\"submit\">Create Group</Button>\n          <ul className=\"group__list\">\n            {users.map((u) => {\n              return (\n                <div className=\"group__user\">\n                  <Avatar\n                    src={\n                      u.photo ??\n                      `https://ui-avatars.com/api/?name=${u.firstName}+${u.lastName}&background=random`\n                    }\n                  />\n                  <h3>{`${u.firstName} ${u.lastName}`}</h3>\n                </div>\n              );\n            })}\n            <div ref={bottomRef} className=\"list-bottom\"></div>\n          </ul>\n        </FormControl>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default reduxForm({ form: \"group\" })(Group);\n","import React, { useEffect, useState } from \"react\";\nimport Sidebar from \"../sidebar/sidebar\";\nimport Chat from \"../chat/chat\";\nimport \"./imessage.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logout, selectToken, selectUser } from \"../../features/userSlice\";\nimport { BASE_URL, SIGNALR } from \"../../utils/endpoints\";\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\nimport {\n  addMessage,\n  selectedChat,\n  setChatList,\n  setStatus,\n} from \"../../features/chatSlice\";\nimport { auth } from \"../../utils/firebase\";\nimport Group from \"../group/group\";\nimport { selectLoading } from \"../../features/appSlice\";\n\nconst Imessage = () => {\n  const token = useSelector(selectToken);\n  const [connection, setConnection] = useState(null);\n  const chat = useSelector(selectedChat);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const newConnection = new HubConnectionBuilder()\n      .withUrl(BASE_URL + SIGNALR, { accessTokenFactory: () => token })\n      .withAutomaticReconnect()\n      .build();\n\n    setConnection(newConnection);\n  }, [token]);\n\n  useEffect(() => {\n    if (connection) {\n      connection\n        .start()\n        .then(() => {\n          console.log(\"Connected\");\n        })\n        .catch((e) => {\n          console.log(\"Connection failed:\", e);\n        });\n\n      connection.on(\"Chats\", (chats) => {\n        console.log(\"Chats\", chats);\n        dispatch(setChatList(chats));\n      });\n      connection.on(\"Message\", (message) => {\n        console.log(\"Message\", message);\n        dispatch(addMessage(message));\n      });\n      connection.on(\"UserStatus\", (user) => {\n        console.log(\"UserStatus\", user);\n        dispatch(setStatus(user));\n      });\n    }\n  }, [connection]);\n\n  const sendMessage = (message) => {\n    if (connection.connectionStarted) {\n      try {\n        connection.invoke(\"SendMessage\", chat.id, chat.clientId, message);\n      } catch (e) {\n        console.log(e);\n      }\n    } else {\n      alert(\"No connection to server yet.\");\n    }\n  };\n  const signOut = () => {\n    auth.signOut();\n    dispatch(logout());\n    connection.stop();\n  };\n\n  return (\n    <div className=\"imessage\">\n      <Sidebar signOut={signOut} />\n      <Chat sendMessage={sendMessage} />\n      <Group />\n    </div>\n  );\n};\n\nexport default Imessage;\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();","import \"./login.css\";\nimport { Field, reduxForm } from \"redux-form\";\nimport React from \"react\";\nimport { Button, FormControl, FormLabel } from \"@material-ui/core\";\nimport { auth, provider } from \"../../../utils/firebase\";\nimport FormTextField from \"../../common/formtextfield\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login } from \"../../../features/userSlice\";\nimport { Link } from \"react-router-dom\";\nimport {\n  selectFormError,\n  selectLoading,\n  setFormError,\n} from \"../../../features/appSlice\";\n\nconst fields = [\n  { name: \"email\", type: \"email\" },\n  { name: \"password\", type: \"password\" },\n];\n\nconst formName = \"login\";\n\nconst Login = (props) => {\n  const dispatch = useDispatch();\n  const formError = useSelector((state) => selectFormError(state, formName));\n  const loading = useSelector((state) => selectLoading(state, formName));\n\n  const googleSignIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((user) => {\n        signIn({ email: user.user.email });\n      })\n      .catch((error) =>\n        dispatch(setFormError({ name: formName, error: error.message }))\n      );\n  };\n  const signIn = (userCreds) => {\n    dispatch(login(userCreds));\n  };\n  return (\n    <div className=\"login\">\n      <div className=\"login__container\">\n        <div className=\"login__logo\">\n          <img src=\"https://i.redd.it/jdto14wkj9f51.png\" alt=\"\" />\n          <h1>iMessage</h1>\n        </div>\n        <FormControl\n          component=\"form\"\n          margin=\"normal\"\n          className=\"login__form\"\n          onSubmit={props.handleSubmit(signIn)}\n        >\n          {formError ? (\n            <FormLabel error filled>\n              {formError}\n            </FormLabel>\n          ) : null}\n          {fields.map((field) => (\n            <Field\n              key={field.name}\n              name={field.name}\n              type={field.type}\n              component={FormTextField}\n            />\n          ))}\n          <Button disabled={loading} type=\"submit\">\n            Sign In\n          </Button>\n        </FormControl>\n        <div className=\"login__social\">\n          <small>Or Sign In Using</small>\n          <img\n            onClick={googleSignIn}\n            src=\"https://img-authors.flaticon.com/google.jpg\"\n            alt=\"\"\n          />\n        </div>\n        <p>\n          Don't have an account?{\" \"}\n          <Link to=\"/register\">\n            <strong>Sign Up</strong>\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nconst validate = (values) => {\n  const errors = {};\n  fields.forEach((field) => {\n    if (!values[field.name]) {\n      errors[field.name] = `${\n        field.name.charAt(0).toLocaleUpperCase() + field.name.slice(1)\n      } cannot be empty`;\n    }\n  });\n  return errors;\n};\n\nexport default reduxForm({ form: formName, validate })(Login);\n","import React from \"react\";\nimport \"./register.css\";\nimport { Button, FormControl, FormLabel } from \"@material-ui/core\";\nimport { Field, reduxForm } from \"redux-form\";\nimport FormTextField from \"../../common/formtextfield\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectFormError,\n  selectLoading,\n  setFormError,\n} from \"../../../features/appSlice\";\nimport { Link } from \"react-router-dom\";\nimport { register } from \"../../../features/userSlice\";\nimport { auth, provider } from \"../../../utils/firebase\";\n\nconst fields = [\n  { name: \"firstname\", type: \"text\" },\n  { name: \"lastname\", type: \"text\" },\n  { name: \"email\", type: \"email\" },\n  { name: \"password\", type: \"password\" },\n];\nconst formName = \"register\";\n\nconst Register = (props) => {\n  const formError = useSelector((state) => selectFormError(state, formName));\n  const loading = useSelector((state) => selectLoading(state, formName));\n  const dispatch = useDispatch();\n\n  const googleSignUp = () => {\n    auth\n      .signInWithPopup(provider)\n      .then(({ user }) => {\n        signUp({\n          firstName: user.displayName.substr(0, user.displayName.indexOf(\" \")),\n          lastName: user.displayName.substr(user.displayName.indexOf(\" \") + 1),\n          email: user.email,\n          password: user.uid,\n        });\n      })\n      .catch((error) =>\n        dispatch(setFormError({ name: formName, error: error.message }))\n      );\n  };\n  const signUp = (userDetails) => {\n    dispatch(register(userDetails));\n  };\n\n  return (\n    <div className=\"register\">\n      <div className=\"register__container\">\n        <FormControl\n          component=\"form\"\n          margin=\"normal\"\n          className=\"register__form\"\n          onSubmit={props.handleSubmit(signUp)}\n        >\n          {formError ? (\n            <FormLabel error filled>\n              {formError}\n            </FormLabel>\n          ) : null}\n          {fields.map((field) => (\n            <Field\n              name={field.name}\n              type={field.type}\n              component={FormTextField}\n            />\n          ))}\n          <Button disabled={loading} type=\"submit\">\n            Create Account\n          </Button>\n        </FormControl>\n        <div className=\"register__social\">\n          <small>Or Sign Up Using</small>\n          <img\n            onClick={googleSignUp}\n            src=\"https://img-authors.flaticon.com/google.jpg\"\n            alt=\"\"\n          />\n        </div>\n        <p>\n          Already have an account?{\" \"}\n          <Link to=\"/login\">\n            <strong>Login</strong>\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default reduxForm({ form: formName })(Register);\n","import \"./App.css\";\nimport Imessage from \"../imessage/imessage\";\nimport { useSelector } from \"react-redux\";\nimport history from \"../../utils/history\";\nimport { Route, Router, Switch } from \"react-router-dom\";\nimport { selectUser } from \"../../features/userSlice\";\nimport Login from \"../authorize/login/login\";\nimport { useEffect } from \"react\";\nimport Register from \"../authorize/register/register\";\n\nfunction App() {\n  const user = useSelector(selectUser);\n\n  useEffect(() => {\n    if (!user) {\n      history.push(\"/login\");\n    } else {\n      history.push(\"/\");\n    }\n  }, [user]);\n\n  return (\n    <Router history={history}>\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/\">{user && <Imessage />}</Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport user from \"./features/userSlice\";\nimport chat from \"./features/chatSlice\";\nimport app from \"./features/appSlice\";\nimport { reducer as form } from \"redux-form\";\nimport { saveAuthToken } from \"./utils/api\";\nconst reducer = combineReducers({\n  user,\n  chat,\n  form,\n  app,\n});\nconst store = configureStore({\n  reducer,\n  middleware: [saveAuthToken, ...getDefaultMiddleware()],\n});\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}